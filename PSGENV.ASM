;
;		ÇoÇrÇfÇ…ÉGÉìÉxÉçÅ[ÉuÇÇ©ÇØÇøÇ·Ç§ÇºÅI
;
;			Made by Ken/ichiro
;
.286C

CRT		EQU	0AH

ON		EQU	-1
OFF		EQU	0

CODE		SEGMENT	PUBLIC
		ASSUME	CS:CODE,DS:CODE,ES:CODE
		ORG	0
		DB	"PSGENV LOADED"
		ORG	1CH
LVLFLAG		DB	OFF
		DW	OFFSET PATBASE
ALREADY_INIT	DB	OFF
		ORG	20H
START:
		PUSHA
		MOV	AX,CS
		MOV	DS,AX
		MOV	ES,AX

		MOV	AL,ALREADY_INIT
		CMP	AL,OFF
		JNE	TOCLOSE
		CALL	INIT
		JMP	EXIT
TOCLOSE:	CALL	CLOSE

EXIT:
		POPA
		IRET

INIT		PROC

		PUSH	ES
		XOR	AX,AX
		MOV	ES,AX

		MOV	SI,CRT*4
		MOV	CX,4
		MOV	DI,OFFSET OLD_CRTV_VECT
LOAD_OLD_CRTV:	MOV	AL,ES:[SI]
		MOV	[DI],AL
		INC	SI
		INC	DI
		LOOP	LOAD_OLD_CRTV

		MOV	DI,CRT*4
		MOV	AX,OFFSET PSGENV
		CLI
		MOV	ES:[DI],AX
		INC	DI
		INC	DI
		MOV	ES:[DI],CS
		STI

		POP	ES

		IN	AL,02H
		MOV	OLD_INT_MASK,AL
		AND	AL,0FBH
		OUT	02H,AL
		OUT	64H,AL

		MOV	AL,ON
		MOV	ALREADY_INIT,AL
		RET

INIT		ENDP

CLOSE		PROC

		PUSH	ES
		XOR	AX,AX
		MOV	ES,AX
		MOV	DI,CRT*4
		MOV	CX,4
		MOV	SI,OFFSET OLD_CRTV_VECT
		CLI
STORE_OLD_CRTV:	MOV	AL,[SI]
		MOV	ES:[DI],AL
		INC	SI
		INC	DI
		LOOP	STORE_OLD_CRTV
		STI

		MOV	AX,0A000H
		MOV	ES,AX
		MOV	BX,24*80*2
		MOV	ES:[BX],BYTE PTR 20H
		INC	BX
		INC	BX
		MOV	ES:[BX],BYTE PTR 20H
		INC	BX
		INC	BX
		MOV	ES:[BX],BYTE PTR 20H

		POP	ES
		MOV	AL,OFF
		MOV	ALREADY_INIT,AL
		MOV	AL,OLD_INT_MASK
		OUT	02H,AL
		RET
CLOSE		ENDP

PSGENV		PROC	FAR

		CLI
		PUSH	AX
		PUSH	DI
		PUSH	DS

		MOV	AX,CS
		MOV	DS,AX

		MOV	AH,7
		CALL	INP
		MOV	ZURU,AL

		INC	A_COUNT

		MOV	AH,8
		CALL	INP
		MOV	AH,A_VOL
		OR	AL,AL
		JNZ	A_NZ
		MOV	A_VOL,AL
		JMP	A_DONE
A_NZ:		CMP	AL,AH
		JNE	A_FRESH

		MOV	DI,A_NOWB
		INC	DI
		MOV	AL,[DI]
		OR	AL,AL
		JZ	A_DONE

		MOV	AH,A_COUNT
		CMP	AH,AL
		JBE	A_DONE

		INC	DI
		MOV	A_NOWB,DI
		MOV	AL,[DI]
		MOV	AH,8
		CALL	OUTP
		MOV	A_VOL,AL
		XOR	AH,AH
		MOV	A_COUNT,AH
		JMP	A_DONE

A_FRESH:	MOV	AH,11
		CALL	INP
		XOR	AH,AH
		SHL	AX,1
		MOV	DI,OFFSET PATBASE
		ADD	DI,AX
		MOV	DI,[DI]
		MOV	A_NOWB,DI
		MOV	AL,[DI]
		MOV	A_VOL,AL
		MOV	AH,1
		MOV	A_COUNT,AH
		OR	AL,AL
		JZ	A_DONE
		MOV	AH,8
		CALL	OUTP

A_DONE:
		INC	B_COUNT

		MOV	AH,9
		CALL	INP
		MOV	AH,B_VOL
		OR	AL,AL
		JNZ	B_NZ
		MOV	B_VOL,AL
		JMP	B_DONE
B_NZ:		CMP	AL,AH
		JNE	B_FRESH

		MOV	DI,B_NOWB
		INC	DI
		MOV	AL,[DI]
		OR	AL,AL
		JZ	B_DONE

		MOV	AH,B_COUNT
		CMP	AH,AL
		JBE	B_DONE

		INC	DI
		MOV	B_NOWB,DI
		MOV	AL,[DI]
		MOV	AH,9
		CALL	OUTP
		MOV	B_VOL,AL
		XOR	AH,AH
		MOV	B_COUNT,AH
		JMP	B_DONE

B_FRESH:	MOV	AH,12
		CALL	INP
		XOR	AH,AH
		SHL	AX,1
		MOV	DI,OFFSET PATBASE
		ADD	DI,AX
		MOV	DI,[DI]
		MOV	B_NOWB,DI
		MOV	AL,[DI]
		MOV	B_VOL,AL
		OR	AL,AL
		JZ	B_DONE
		MOV	AH,1
		MOV	B_COUNT,AH
		MOV	AH,9
		CALL	OUTP

B_DONE:
		INC	C_COUNT

		MOV	AH,10
		CALL	INP
		MOV	AH,C_VOL
		OR	AL,AL
		JNZ	C_NZ
		MOV	C_VOL,AL
		JMP	C_DONE
C_NZ:		CMP	AL,AH
		JNE	C_FRESH

		MOV	DI,C_NOWB
		INC	DI
		MOV	AL,[DI]
		OR	AL,AL
		JZ	C_DONE

		MOV	AH,C_COUNT
		CMP	AH,AL
		JBE	C_DONE

		INC	DI
		MOV	C_NOWB,DI
		MOV	AL,[DI]
		MOV	AH,10
		CALL	OUTP
		MOV	C_VOL,AL
		XOR	AH,AH
		MOV	C_COUNT,AH
		JMP	C_DONE

C_FRESH:	MOV	AH,13
		CALL	INP
		XOR	AH,AH
		SHL	AX,1
		MOV	DI,OFFSET PATBASE
		ADD	DI,AX
		MOV	DI,[DI]
		MOV	C_NOWB,DI
		MOV	AL,[DI]
		MOV	C_VOL,AL
		OR	AL,AL
		JZ	C_DONE
		MOV	AH,1
		MOV	C_COUNT,AH
		MOV	AH,10
		CALL	OUTP

C_DONE:
		PUSH	ES
		MOV	DI,0A000H
		MOV	ES,DI

		MOV	AH,LVLFLAG
		OR	AH,AH
		JNZ	PUTLVL
		MOV	DI,24*80*2
		MOV	ES:[DI],BYTE PTR 'P'
		JMP	LVLEND

PUTLVL:		MOV	AH,8
		CALL	INP
		AND	AX,0FH
		MOV	DI,OFFSET HEX
		ADD	DI,AX
		MOV	AL,[DI]
		MOV	DI,24*80*2
		MOV	ES:[DI],AL

		MOV	AH,9
		CALL	INP
		AND	AX,0FH
		MOV	DI,OFFSET HEX
		ADD	DI,AX
		MOV	AL,[DI]
		MOV	DI,24*80*2+2
		MOV	ES:[DI],AL

		MOV	AH,10
		CALL	INP
		AND	AX,0FH
		MOV	DI,OFFSET HEX
		ADD	DI,AX
		MOV	AL,[DI]
		MOV	DI,24*80*2+4
		MOV	ES:[DI],AL

LVLEND:		POP	ES

		MOV	AH,7
		MOV	AL,ZURU
		CALL	OUTP

		XOR	AL,AL
		OUT	64H,AL

		POP	DS
		POP	DI
		POP	AX
		STI

		JMP	CS:[OLD_CRTV_VECT]

PSGENV		ENDP

OUTP		PROC
;			AH=REG NO : AL=DATA
		PUSH	DX
		PUSH	AX
		MOV	DX,188H
YM_BUSY_WAIT:	IN	AL,DX
		AND	AL,80H
		JNZ	YM_BUSY_WAIT
		POP	AX
		XCHG	AH,AL
		OUT	DX,AL
		XCHG	AH,AL
		MOV	DX,18AH
		OUT	DX,AL
		POP	DX
		RET
OUTP		ENDP

INP		PROC
;			AH=REG NO : AL=DATA
		PUSH	DX
		PUSH	AX
		MOV	DX,188H
YM_BUSY_WAIT2:	IN	AL,DX
		AND	AL,80H
		JNZ	YM_BUSY_WAIT2
		POP	AX
		XCHG	AH,AL
		OUT	DX,AL
		XCHG	AH,AL
		MOV	DX,18AH
		IN	AL,DX
		POP	DX
		RET
INP		ENDP

;************************************************

HEX		DB	"0123456789ABCDEFH"
ZURU		DB	?
OLD_CRTV_VECT	DD	?
OLD_INT_MASK	DB	?

A_NOWB		DW	OFFSET NOENV
B_NOWB		DW	OFFSET NOENV
C_NOWB		DW	OFFSET NOENV

A_VOL		DB	0
B_VOL		DB	0
C_VOL		DB	0

A_COUNT		DB	0
B_COUNT		DB	0
C_COUNT		DB	0

DB	8 DUP (' ')
DB	"PSGENV--Made by Ken/ichiro"
DB	8 DUP (' ')

;PATTERN DATA ***********************************
PATBASE		DW	OFFSET NOENV

		DW	OFFSET PAT_1
		DW	OFFSET PAT_2
		DW	OFFSET PAT_3
		DW	OFFSET PAT_4

NOENV		DW	0

;                    LEVEL,TIME(0 IS END)
PAT_1		DB	15,19, 14,19, 13,19, 12,19, 11,19, 10,19,  9,19,  8,19
		DB	 7,19,  6, 19, 5, 0

PAT_2		DB	15, 4, 14, 4, 13, 4, 12, 4, 11, 4, 10, 4,  9, 4,  8, 4
		DB	 7, 4,  6,  4, 5, 4,  4, 4,  3, 4,  2, 4,  1, 4,  0, 0

PAT_3		DB	11, 1, 13, 1, 14,12, 13,12, 12,12, 11,12, 10,12
		DB	 9,12,  8,12,  7,12,  6,12,  5, 0

PAT_4		DB	15, 4, 13,40, 12,40, 11,40, 10, 0


;************************************************

CODE		ENDS
		END
